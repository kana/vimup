#!/usr/bin/env ruby

require 'pp'
require 'yaml'




def parse_doc(s)
  _ = {}

  /^Script ID: (\d+)$/ =~ s
  if Regexp.last_match
    _['script_id'] = Regexp.last_match(1)
  else
    #raise RuntimeError, 'Not found: script_id'
  end

  /\bis a (Vim (filetype )?plugin)?\b/ =~ s
  raise RuntimeError, 'Not found: script_type' unless Regexp.last_match
  _['script_type'] = if Regexp.last_match(2)  # FIXME: support more types
                       'ftplugin'
                     else
                       'utility'
                     end

  /^INTRODUCTION\b.*\n+((.*\n)*?)=/ =~ s
  raise RuntimeError, 'Not found: introduction' unless Regexp.last_match
  _['introduction'] = Regexp.last_match(1).chomp('').gsub(/^[><]$/, '')

    # FIXME: INTRODUCTION must start with the tag of the name of a script.
    #        Example of violation: ku-source-metarw should be ku-metarw
  /^\*([^*]+)\*/ =~ _['introduction']
  raise RuntimeError, 'Not found: script_name' unless Regexp.last_match
  _['script_name'] = Regexp.last_match(1)

  /\A.*\t(.*)$/ =~ s
  raise RuntimeError, 'Not found: summary' unless Regexp.last_match
  _['summary'] = Regexp.last_match(1)

  /^CHANGELOG\b.*\n+((.*\n)*?)=/ =~ s
  raise RuntimeError, 'Not found: versions' unless Regexp.last_match
  _['versions'] = Regexp.last_match(1).
                  scan(/^([\d.]+)\t.*\n((?:\t.*\n|[<>]?\n)*)/).map do |x|
    {x[0] => format_release_notes(x[1])}
  end

  _
end

def format_release_notes(raw_text)
  # Drop indent from the raw_text.
  _ = raw_text
  _ = _.gsub /^\t/, ''
  _ = _.chomp ''
  #
  #|>
  #|  Code example
  #|<
  # ==>
  #|
  #|  Code example
  #|
  _ = _.gsub /^[><]$/, ''

  #|- A logical line
  #|  which is folded as this.
  #|  - Sub line
  #|    which is folded as this.
  # ==>
  #|- A logical line which is folded as this.
  #|  - Sub line which is folded as this.
  new_lines = []
  lines = _.split /\n/
  i = 0
  while i < lines.length
    if /^ *- /.match lines[i]
      new_lines.push lines[i]
      while i+1 < lines.length
        if /^ *- /.match lines[i+1] or /^$/.match lines[i+1]
          break
        end
        new_lines[-1] += ' ' if /\.$/.match new_lines[-1]
        new_lines[-1] += ' '
        new_lines[-1] += lines[i+1].sub /^ */, ''
        i += 1
      end
    else
      new_lines.push lines[i]
    end

    i += 1
  end
  new_lines.join "\n"
end




if __FILE__ == $0
  _ = parse_doc($stdin.read())

  print YAML.dump({
    'script_name' => _['script_name'],
    'script_id' => _.fetch('script_id', ''),
    'script_type' => _['script_type'],
    'script_package' => 'vim-{script_name}-{version}.zip',
    'required_vim_version' => '7.0',
    'summary' => _['summary'],
    'detailed_description' => _['introduction'],
    'install_details' => '...',
    'versions' => _['versions'],
  })
end


__END__
