#!/usr/bin/env ruby
# vimup - A tool to automate uploading Vim scripts to www.vim.org
#
# Copyright (C) 2008-2010 kana <http://whileimautomaton.net/>
#
# License: So-called MIT/X license
#
#     Permission is hereby granted, free of charge, to any person obtaining
#     a copy of this software and associated documentation files (the
#     "Software"), to deal in the Software without restriction, including
#     without limitation the rights to use, copy, modify, merge, publish,
#     distribute, sublicense, and/or sell copies of the Software, and to
#     permit persons to whom the Software is furnished to do so, subject to
#     the following conditions:
#
#     The above copyright notice and this permission notice shall be included
#     in all copies or substantial portions of the Software.
#
#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
#     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
#     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

require 'yaml'

require 'rubygems'
require 'highline/import'
require 'mechanize'




class VimupCore
  VALID_KEYS = [
    'detailed_description',
    'install_details',
    'required_vim_version',
    'script_id',
    'script_name',
    'script_package',
    'script_type',
    'summary',
    'versions',
  ]

  def initialize(vimup_info_filename, verbose_p=true)
    @verbose_p = verbose_p
    @authorized_p = false
    load_vimup_file vimup_info_filename
  end

  def message(s)
    puts s if @verbose_p
  end

  def load_vimup_file(filename)
    message "Loading #{filename} ..."

    _ = YAML.load_file filename

    _['versions'].each do |version_info|
      version_number = version_info.keys[0]
      if version_info[version_number].class == String
        version_info[version_number] = {
          'comment' => version_info[version_number],
          'required_vim_version' => _['required_vim_version'],
        }
      end
    end

    _.each do |k,v|
      if VALID_KEYS.include? k
        instance_variable_set('@' + k, v)
      end
    end
  end

  def login()
    if @authorized_p
      return
    end

    message 'login ...'

      # TODO: use also pit
    username = ask 'Username: '
    password = ask('Password: ') {|q| q.echo = false}

    uri_login =  'http://www.vim.org/login.php'
    login_page = @agent.get uri_login
    if login_page.uri != URI(uri_login)
      raise RuntimeError, 'Failed to fetch login uri'
    end

    form = login_page.form 'login'
    form.userName = username
    form.password = password
    account_page = @agent.submit form, form.buttons.first
    if account_page.uri != URI('http://www.vim.org/account/index.php')
      raise RuntimeError, 'Failed to login'
    end

    @authorized_p = true
  end

  def current_script_version(page)
    page.search('p').each do |p|
      m = /Current script version is ([^ ]+)/.match(p.inner_text)
      if m != nil
        return m[1]
      end
    end

    raise RuntimeError, 'Invalid page'
  end

  def do_subcommand(subcommand_name)
    message "Start #{subcommand_name} ..."
    @agent = WWW::Mechanize.new
    method('subcommand_' + subcommand_name.gsub('-', '_')).call
  end

  def subcommand_update_details()
    login

    message 'prepare ...'
    uri_edit = 'http://www.vim.org/scripts/edit_script.php?script_id=' +
               @script_id
    edit_page = @agent.get uri_edit
    if edit_page.uri != URI(uri_edit)
      raise RuntimeError, 'Failed to fetch edit uri'
    end
    form = edit_page.form 'script'
    form.script_name = @script_name
    form.summary = @summary
    form.description = @detailed_description
    form.install_details = @install_details

    message 'update ...'
    result_page = @agent.submit form, form.buttons.first
    if result_page.uri != URI(
        'http://www.vim.org/scripts/script.php?script_id=' +
        @script_id)
      raise RuntimeError, 'Failed to update'
    end

    message 'update-details has been succeeded'
    0
  end

  def subcommand_update_script()
    login

    message 'prepare ...'
    uri_upload_form = (
        'http://www.vim.org/scripts/add_script_version.php?script_id=' +
        @script_id
      )
    upload_page = @agent.get uri_upload_form
    if upload_page.uri != URI(uri_upload_form)
      raise RuntimeError, 'Failed to prepare'
    end

    form = upload_page.form 'script'
    _ = @versions[0]
    latest_version_number = _.keys[0]
    latest_version_info = _[latest_version_number]
    form.script_version = latest_version_number
    form.version_comment = latest_version_info['comment']
    c = current_script_version(upload_page)
    message "current version: #{c}"
    message "new version to be uploaded: #{latest_version_number}"
    if latest_version_number == c
      message 'Already up to date'
      return 0
    end
    form.fields.each do |f|
      if f.name == 'vim_version'
        option_with_value(
          f.options,
          latest_version_info['required_vim_version']
        ).select
      end
    end
    script_package = @script_package.
                     sub('{script_name}', @script_name).
                     sub('{version}', latest_version_number)
    if !File.exists?(script_package)
      raise RuntimeError, "No such package: #{script_package.inspect}"
    end
    form.file_uploads.first.file_name = script_package

    result_page = @agent.submit form, form.buttons.first
    if result_page.uri != URI(
        'http://www.vim.org/scripts/script.php?script_id=' +
        @script_id)
      raise RuntimeError, 'Failed to upload package'
    end

    message 'update-script has been succeeded'
    0

    subcommand_update_details
  end

  def subcommand_new_script()
    login

    message 'prepare ...'
    uri_upload_form = ('http://www.vim.org/scripts/add_script.php')
    upload_page = @agent.get uri_upload_form
    if upload_page.uri != URI(uri_upload_form)
      raise RuntimeError, 'Failed to prepare'
    end

    form = upload_page.form 'script'
    form.script_name = @script_name
    form.script_type = @script_type
    _ = @versions[0]
    latest_version_number = _.keys[0]
    latest_version_info = _[latest_version_number]
    form.script_version = latest_version_number
    form.fields.each do |f|
      if f.name == 'vim_version'
        option_with_value(
          f.options,
          latest_version_info['required_vim_version']
        ).select
      end
    end
    form.summary = @summary
    form.description = @detailed_description
    form.install_details = @install_details
    script_package = @script_package.
                     sub('{script_name}', @script_name).
                     sub('{version}', latest_version_number)
    if !File.exists?(script_package)
      raise RuntimeError, "No such package: #{script_package.inspect}"
    end
    form.file_uploads.first.file_name = script_package

    result_page = @agent.submit form, form.buttons.first
    if Regexp.new(
         Regexp.escape('http://www.vim.org/scripts/script.php?script_id=').
         to_s + '(\d+)'
       ) =~ result_page.uri.to_s
      raise RuntimeError, 'Failed to upload package'
    end

    message 'new-script has been succeeded'
    message 'script id is #{Regexp.last_match(1)}'
    0
  end
end

def option_with_value(options, value)
  options.each do |o|
    if o.value == value
      return o
    end
  end

  raise RuntimeError, 'No option with value #{value.inspect}'
end




if __FILE__ == $0
  def main(args)
    if args.length != 2
      return usage
    end
    subcommand_name = args[0]
    vimup_info_filename = args[1] + '.vimup'

    v = VimupCore.new vimup_info_filename
    v.do_subcommand subcommand_name
  end

  def usage()
    print <<END
Usage: vimup {command} {script-name}

{command}
END
    VimupCore.public_instance_methods.sort.each do |m|
      if /^subcommand_/ =~ m
        puts "  #{m.to_s.sub('subcommand_', '').gsub('_', '-')}"
      end
    end
    1
  end

  exit main(ARGV)
end

# __END__
