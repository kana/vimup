#!/usr/bin/env ruby

require 'yaml'

require 'rubygems'
require 'highline/import'
require 'mechanize'




class VimupCore
  VALID_KEYS = [
    'detailed_description',
    'install_details',
    'required_vim_version',
    'script_id',
    'script_name',
    'script_package',
    'script_type',
    'summary',
    'versions',
  ]

  def initialize(vimup_info_filename, verbose_p=true)
    @verbose_p = verbose_p
    load_vimup_file vimup_info_filename
  end

  def message(s)
    print s, "\n" if @verbose_p
  end

  def load_vimup_file(filename)
    message "Loading #{filename} ..."

    _ = YAML.load_file filename

    _['versions'].each do |version_info|
      version_number = version_info.keys[0]
      if version_info[version_number].class == String
        version_info[version_number] = {
          'comment' => version_info[version_number],
          'required_vim_version' => _['required_vim_version'],
        }
      end
    end

      # TODO: use also pit
    if ! _.has_key? 'username'
      @username = ask 'Username: '
    end
    if ! _.has_key? 'password'
      @password = ask('Password: ') {|q| q.echo = false}
    end

    _.each do |k,v|
      if VALID_KEYS.include? k
        instance_variable_set('@' + k, v)
      end
    end
  end

  def do_subcommand(subcommand_name)
    message "Start #{subcommand_name} ..."
    method('subcommand_' + subcommand_name.gsub('-', '_')).call
  end

  def subcommand_update_details()
    agent = WWW::Mechanize.new

    # login
    message 'login ...'
    login_page = agent.get 'http://www.vim.org/login.php'
    form = login_page.form 'login'
    form.userName = @username
    form.password = @password
    account_page = agent.submit form, form.buttons.first
    if account_page.uri != URI('http://www.vim.org/account/index.php')
      raise RuntimeError, 'Failed to login'
    end

    # edit
    message 'edit ...'
    edit_page = agent.get(
                  'http://www.vim.org/scripts/edit_script.php?script_id=' +
                  @script_id
                )
    form = edit_page.form 'script'
    form.script_name = @script_name
    form.summary = @summary
    form.description = @detailed_description
    form.install_details = @install_details

    message 'update ...'
    result_page = agent.submit form, form.buttons.first
    if result_page.uri != URI(
        'http://www.vim.org/scripts/script.php?script_id=' +
        @script_id)
      raise RuntimeError, 'Failed to update'
    end

    message 'update-details has been succeeded'
    0
  end

  def subcommand_update_script()
    pp 'subcommand_update_script'
    0
  end

  def subcommand_new_script()
    pp 'subcommand_new_script'
    0
  end
end




def main(args)
  if args.length != 2
    return usage
  end
  subcommand_name = args[0]
  vimup_info_filename = args[1] + '.vimup'

  v = VimupCore.new vimup_info_filename
  v.do_subcommand subcommand_name
end

def usage()
  print <<END
Usage: vimup {command} {script-name}

{command}
  update_details
  update_package
  new_package
END
  1
end

exit main(ARGV)

# __END__
